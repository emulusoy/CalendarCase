
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>EMU | Calendar</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
    <link rel="stylesheet" href="/calendaradmin/plugins/fontawesome-free/css/all.min.css">
    <link rel="stylesheet" href="/calendaradmin/plugins/fullcalendar/main.css">
    <link rel="stylesheet" href="/calendaradmin/dist/css/adminlte.min.css">
    <style>
        .custom-navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 5%;
            background-color: white;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            position: relative;
            z-index: 1030;
        }

        .nav-links {
            display: flex;
            gap: 30px;
        }

            .nav-links.left {
                margin-right: auto;
            }

            .nav-links.right {
                margin-left: auto;
            }

            .nav-links a {
                text-decoration: none;
                color: #333;
                font-weight: 500;
                font-size: 16px;
                transition: color 0.3s;
            }

                .nav-links a:hover {
                    color: #4a6cf7;
                }

        .logo {
            font-size: 24px;
            font-weight: 700;
            color: sandybrown;
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
        }

        /* Takvim alanını düzenle */
        .content-wrapper {
            margin-left: 0 !important;
            padding: 20px;
            margin-top: 20px;
        }

        /* Kart stil düzenlemeleri */
        .card {
            border-radius: 10px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
            border: none;
        }

        .card-header {
            background-color: white;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body class="hold-transition sidebar-collapse">
    <div class="wrapper">
        <nav class="custom-navbar">
            <div class="nav-links left">
                <a href="#">Home</a>
                <a href="#">Event</a>
            </div>

            <div class="logo">EMU</div>

            <div class="nav-links right">
                <a href="#">Category</a>
                <a href="#">Settings</a>
            </div>
        </nav>
        <div class="content-wrapper">
            <section class="content-header">
                <div class="container-fluid">
                </div>
            </section>
            <section class="content">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="sticky-top mb-3">
                                @await Component.InvokeAsync("EventMenu")
                            </div>
                        </div>
                        <div class="col-md-9">
                            <div class="card card-primary">
                                <div class="card-body p-0">
                                    <div id="calendar"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>
        <footer class="main-footer">
            <div class="float-right d-none d-sm-block">
              
            </div>
            <strong>Copyright &copy; 2023 EMU Calendar</strong> All rights reserved.
        </footer>
    </div>
    <script src="/calendaradmin/plugins/jquery/jquery.min.js"></script>
    <script src="/calendaradmin/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/calendaradmin/plugins/jquery-ui/jquery-ui.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <script src="/calendaradmin/dist/js/adminlte.min.js"></script>
    <script src="/calendaradmin/plugins/moment/moment.min.js"></script>
    <script src="/calendaradmin/plugins/fullcalendar/main.js"></script>
    <script src="/calendaradmin/dist/js/demo.js"></script>
    <script>
        $(function () {
            function ini_events(ele) {
                ele.each(function () {
                    var eventObject = {
                        title: $.trim($(this).text())
                    };
                    $(this).data('eventObject', eventObject);
                    $(this).draggable({
                        zIndex: 1070,
                        revert: true,
                        revertDuration: 0
                    });
                });
            }

            ini_events($('#external-events div.external-event'));

            var Calendar = FullCalendar.Calendar;
            var Draggable = FullCalendar.Draggable;

            var containerEl = document.getElementById('external-events');
            var checkbox = document.getElementById('drop-remove');
            var calendarEl = document.getElementById('calendar');

            new Draggable(containerEl, {
                itemSelector: '.external-event',
                eventData: function (eventEl) {
                    return {
                        title: eventEl.innerText.trim(),
                        backgroundColor: eventEl.getAttribute('data-color') || window.getComputedStyle(eventEl).getPropertyValue('background-color'),
                        borderColor: eventEl.getAttribute('data-color') || window.getComputedStyle(eventEl).getPropertyValue('background-color'),
                        textColor: window.getComputedStyle(eventEl).getPropertyValue('color'),
                        extendedProps: {
                            categoryId: eventEl.getAttribute('data-category-id'),
                            description: eventEl.getAttribute('data-description') || ""
                        }
                    };
                }
            });

            var calendar = new Calendar(calendarEl, {
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                themeSystem: 'bootstrap',
                editable: true,
                droppable: true,

                forceEventDuration: true,
                defaultTimedEventDuration: '01:00',

                timeZone: 'UTC',
                events: function (fetchInfo, successCallback, failureCallback) {
                    fetch('/Default/GetEvents')
                        .then(response => response.json())
                        .then(data => {
                            successCallback(data);
                        })
                        .catch(() => {
                            alert('Etkinlikler yüklenirken hata oluştu.');
                            failureCallback([]);
                        });
                },

                eventReceive: function (info) {
                    const event = info.event;
                    const start = event.start;
                    const end = event.end;

                    fetch("/Default/AddEvent", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            title: event.title,
                            color: event.backgroundColor,
                            description: event.extendedProps.description,
                            start: start.toISOString(),
                            end: end ? end.toISOString() : null,
                            categoryId: parseInt(event.extendedProps.categoryId),
                            allDay: info.event.allDay
                        })
                    })
                    .then(res => res.json())
                    .then(data => {
                        if (!data.status) {
                            console.error("Backend Hatası:", data);
                            alert("Etkinlik kaydedilirken hata oluştu: " + (data.message || "Bilinmeyen hata"));
                        }
                    })
                    .catch(err => {
                        console.error("Fetch Hatası:", err);
                        alert("Sunucuya bağlanırken hata oluştu.");
                    });
                },

                eventDrop: function (info) {
                    const event = info.event;
                    const eventId = event.id;

                    const eventData = {
                        Id: eventId,
                        Start: event.start.toISOString(),
                        End: event.end ? event.end.toISOString() : null,
                        AllDay: event.allDay
                    };

                    console.log("eventDrop - Gönderilen veri:", eventData);

                    fetch("/Default/UpdateEvent", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(eventData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.status) {
                            alert('Etkinlik güncellenirken hata oluştu: ' + (data.message || "Bilinmeyen hata"));
                            info.revert();
                        }
                    })
                    .catch(err => {
                            console.error("Hata:", err);
                            alert('Sunucuya bağlanırken hata oluştu.');
                            info.revert();
                    });
                },

                eventResize: function (info) {
                    const event = info.event;
                    const eventId = event.id;

                    const eventData = {
                        Id: eventId,
                        Start: event.start.toISOString(),
                        End: event.end ? event.end.toISOString() : null,
                        AllDay: event.allDay
                    };

                    console.log("eventResize - Gönderilen veri:", eventData);

                    fetch("/Default/UpdateEvent", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(eventData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.status) {
                            alert('Etkinlik bitiş tarihi güncellenirken hata oluştu: ' + (data.message || "Bilinmeyen hata"));
                            info.revert();
                        }
                    })
                    .catch(err => {
                        console.error("Hata:", err);
                        alert('Sunucuya bağlanırken hata oluştu.');
                        info.revert();
                    });
                },

                // Etkinlik sürükleme durduğunda çalışır
                eventDragStop: function(info) {
                    const trashEl = $('#delete-zone');
                    const mouseX = info.jsEvent.pageX;
                    const mouseY = info.jsEvent.pageY;

                    const trashOffset = trashEl.offset();
                    const trashWidth = trashEl.outerWidth();
                    const trashHeight = trashEl.outerHeight();

                    // Fare koordinatlarının silme alanının içinde olup olmadığını kontrol et
                    const inTrashZone =
                        mouseX >= trashOffset.left &&
                        mouseX <= trashOffset.left + trashWidth &&
                        mouseY >= trashOffset.top &&
                        mouseY <= trashOffset.top + trashHeight;

                    if (inTrashZone) {
                        if (confirm("Bu etkinliği silmek istediğinizden emin misiniz?")) {
                            const eventId = info.event.id;
                            fetch("/Default/DeleteEvent", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify(parseInt(eventId))
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.status) {
                                    info.event.remove(); // Takvimden etkinliği kaldır
                                    alert("Etkinlik başarıyla silindi.");
                                } else {
                                    alert('Etkinlik silinirken hata oluştu: ' + data.message);
                                }
                            })
                            .catch(err => {
                                console.error("Hata:", err);
                                alert('Sunucuya bağlanırken hata oluştu.');
                                info.revert();
                            });
                        } else {
                            info.revert(); // Kullanıcı vazgeçerse etkinliği geri al
                        }
                    }
                }
            });

            calendar.render();

            $('#add-new-event').click(function (e) {
                e.preventDefault();
                var val = $('#new-event').val();
                var colorClass = $('#color-select').val();

                if (val.length === 0 || colorClass.length === 0) {
                    alert("Lütfen başlık ve renk seçiniz.");
                    return;
                }

                $.ajax({
                    type: 'POST',
                    url: '/Event/AddEvent',
                    data: {
                        title: val,
                        color: colorClass
                    },
                    success: function (response) {
                        if (response.success) {
                            var newEvent = $('<div />')
                                .addClass('external-event ' + response.color + ' text-white px-3 py-2 rounded shadow-sm')
                                .text(response.name);

                            $('#external-events').prepend(newEvent);
                            ini_events(newEvent);
                            $('#new-event').val('');
                        } else {
                            alert("Sunucu hata döndürdü.");
                        }
                    },
                    error: function () {
                        alert("İstek başarısız oldu.");
                    }
                });
            });
        });
    </script>
</body>
</html>